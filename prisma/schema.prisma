generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= OUR CODE =========
enum Role{
  PATIENT
  DOCTOR
  LAB_SUPERVISOR 
  LAB_ASSISTANT
  RECEPTIONIST
}


model User {
  id          Int           @id @default(autoincrement())
  fname       String        @db.VarChar(32)
  lname       String?       @db.VarChar(32)
  sex         String?       @db.VarChar(32)
  email       String        @db.VarChar(64) @unique
  password    String        
  emailVerified DateTime?   @map("email_verified")
  nationalID String         @unique @db.VarChar(11)
  role Role     @default(PATIENT)
  sessions Session[]

  doctor Doctor? 
  receptionist Receptionist? 
  lab_assistant LabAssistant?
  lab_supervisor LabSupervisor?
  patient Patient?

  @@map("users")
}


// ================= OAuth ================

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


model Doctor {
  user User @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int         @id
  
  visits Visit[]

  @@map("doctors")
}

model Receptionist {
  user User @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int         @id

  visits Visit[]

  @@map("receptionists")
}

model LabSupervisor {
  user User @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int      @id

  laboratoryExaminations LaboratoryExamination[]

  @@map("labSupervisors")
}

model LabAssistant {
  user User @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int   @id

  laboratoryExaminations LaboratoryExamination[]

  @@map("labAssistants")
}

model Patient {
  user       User @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  patient_id    Int    @id
  insurance_id String @unique

  visits Visit[]

  @@map("patients")
}


model Visit {
  visit_id Int @id @default(autoincrement())
  description String 
  diagnosis String
  status Status @default(REGISTERED)

  doctor Doctor @relation(fields: [doctor_id], references: [employee_id])
  doctor_id Int
  patient Patient @relation(fields: [patient_id], references: [patient_id])
  patient_id Int
  receptionist Receptionist @relation(fields: [receptionist_id], references: [employee_id])
  receptionist_id Int

  physicalExaminations PhysicalExamination[]
  laboratoryExaminations LaboratoryExamination[]

  @@map("visits")
}

enum Status {
  REGISTERED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


// ========= EXAMINATIONS ===========
//model Examination {
//  examination_id Int @id @default(autoincrement())
//  result String?
//
//  physicalExamination PhysicalExamination?
//  laboratoryExamination LaboratoryExamination?
//  
//  @@map("examinations")
//  }
//

model PhysicalExamination {
  physical_exam_id Int @id @default(autoincrement())
  examinationDictionary       ExaminationDictionary @relation(fields: [exam_code], references: [code], onDelete: Cascade)
  exam_code    Int            @unique

  visit  Visit @relation(fields: [visit_id], references: [visit_id], onDelete: Cascade)
  visit_id Int

  @@map("physicExaminations")
}


model ExaminationDictionary {
  code Int @id 
  type String
  description String?
  physicalExam PhysicalExamination?
  laboratoryExam LaboratoryExamination?

  @@map("examinationDictionaries")
}

enum ExaminationStatus {
  ORDERED
  COMPLETED
  CANCELLED
  APPROVED
  REJECTED
}

model LaboratoryExamination {
  laboratory_exam_id Int @id @default(autoincrement())
  doctorNotice String
  examinationStatus ExaminationStatus
  supervisorNotice String
  DateOfApprovalXorRejection DateTime?
  DateOfExecutionXorCancelling DateTime?
  examinationDictionary       ExaminationDictionary @relation(fields: [exam_code], references: [code], onDelete: Cascade)
  exam_code    Int      @unique

  visit  Visit @relation(fields: [visit_id], references: [visit_id], onDelete: Cascade)
  visit_id Int

  lab_assistant  LabAssistant? @relation(fields: [lab_assistant_id], references: [employee_id], onDelete: Cascade)
  lab_assistant_id Int?

  lab_supervisor  LabSupervisor? @relation(fields: [lab_supervisor_id], references: [employee_id], onDelete: Cascade)
  lab_supervisor_id Int?


  @@map("laboratoryExaminations")
}





//========= OLD PREDEFINED CODE =============
//model User {
//  id            Int       @id @default(autoincrement())
//  name          String?
//  email         String?   @unique
//  emailVerified DateTime? @map("email_verified")
//  image         String?
//  createdAt     DateTime  @default(now()) @map(name: "created_at")
//  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//  accounts      Account[]
//  sessions      Session[]
//
//  @@map(name: "users")
//}
//

//model Account {
//  id                 Int     @id @default(autoincrement())
//  userId             Int     @map("user_id")
//  type               String
//  provider           String
//  providerAccountId  String  @map("provider_account_id")
//  refresh_token      String?
//  access_token       String?
//  expires_at         Int?
//  token_type         String?
//  scope              String?
//  id_token           String?
//  session_state      String?
//  oauth_token_secret String?
//  oauth_token        String?
//
//  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//  @@unique([provider, providerAccountId])
//  @@map("accounts")
//}
//
//model Session {
//  id           Int      @id @default(autoincrement())
//  sessionToken String   @unique @map("session_token")
//  userId       Int      @map("user_id")
//  expires      DateTime
//  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//  @@map("sessions")
//}
//

//model VerificationToken {
//  identifier String
//  token      String   @unique
//  expires    DateTime
//
//  @@unique([identifier, token])
//  @@map("verificationtokens")
//}
